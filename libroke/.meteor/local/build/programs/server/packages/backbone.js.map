{"version":3,"sources":["meteor://ðŸ’»app/packages/backbone/packages/backbone.js"],"names":[],"mappingsfile":"/packages/backbone.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/backbone/backbone.js                                                                                  //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n//     Backbone.js 0.9.2                                                                                          // 1\n                                                                                                                  // 2\n//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.                                                          // 3\n//     Backbone may be freely distributed under the MIT license.                                                  // 4\n//     For all details and documentation:                                                                         // 5\n//     http://backbonejs.org                                                                                      // 6\n                                                                                                                  // 7\n// Meteor changes occur inside <METEOR> </METEOR> -- dgreenspan                                                   // 8\n                                                                                                                  // 9\n(function(){                                                                                                      // 10\n                                                                                                                  // 11\n  // Initial Setup                                                                                                // 12\n  // -------------                                                                                                // 13\n                                                                                                                  // 14\n  // Save a reference to the global object (`window` in the browser, `global`                                     // 15\n  // on the server).                                                                                              // 16\n  var root = this;                                                                                                // 17\n                                                                                                                  // 18\n  // Save the previous value of the `Backbone` variable, so that it can be                                        // 19\n  // restored later on, if `noConflict` is used.                                                                  // 20\n  var previousBackbone = root.Backbone;                                                                           // 21\n                                                                                                                  // 22\n  // Create a local reference to slice/splice.                                                                    // 23\n  var slice = Array.prototype.slice;                                                                              // 24\n  var splice = Array.prototype.splice;                                                                            // 25\n                                                                                                                  // 26\n  // The top-level namespace. All public Backbone classes and modules will                                        // 27\n  // be attached to this. Exported for both CommonJS and the browser.                                             // 28\n  var Backbone;                                                                                                   // 29\n  if (typeof exports !== 'undefined') {                                                                           // 30\n    Backbone = exports;                                                                                           // 31\n  } else {                                                                                                        // 32\n    Backbone = root.Backbone = {};                                                                                // 33\n  }                                                                                                               // 34\n                                                                                                                  // 35\n  // Current version of the library. Keep in sync with `package.json`.                                            // 36\n  Backbone.VERSION = '0.9.2';                                                                                     // 37\n                                                                                                                  // 38\n  // Require Underscore, if we're on the server, and it's not already present.                                    // 39\n  // <METEOR> Commented these lines out; we have _ via api.use.                                                   // 40\n  // var _ = root._;                                                                                              // 41\n  // if (!_ && (typeof require !== 'undefined')) _ = require('underscore');                                       // 42\n  // </METEOR>                                                                                                    // 43\n                                                                                                                  // 44\n  // For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.                                      // 45\n  var $ = root.jQuery || root.Zepto || root.ender;                                                                // 46\n                                                                                                                  // 47\n  // Set the JavaScript library that will be used for DOM manipulation and                                        // 48\n  // Ajax calls (a.k.a. the `$` variable). By default Backbone will use: jQuery,                                  // 49\n  // Zepto, or Ender; but the `setDomLibrary()` method lets you inject an                                         // 50\n  // alternate JavaScript library (or a mock library for testing your views                                       // 51\n  // outside of a browser).                                                                                       // 52\n  Backbone.setDomLibrary = function(lib) {                                                                        // 53\n    $ = lib;                                                                                                      // 54\n  };                                                                                                              // 55\n                                                                                                                  // 56\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable                                     // 57\n  // to its previous owner. Returns a reference to this Backbone object.                                          // 58\n  Backbone.noConflict = function() {                                                                              // 59\n    root.Backbone = previousBackbone;                                                                             // 60\n    return this;                                                                                                  // 61\n  };                                                                                                              // 62\n                                                                                                                  // 63\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option                                    // 64\n  // will fake `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and                                    // 65\n  // set a `X-Http-Method-Override` header.                                                                       // 66\n  Backbone.emulateHTTP = false;                                                                                   // 67\n                                                                                                                  // 68\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct                                  // 69\n  // `application/json` requests ... will encode the body as                                                      // 70\n  // `application/x-www-form-urlencoded` instead and will send the model in a                                     // 71\n  // form param named `model`.                                                                                    // 72\n  Backbone.emulateJSON = false;                                                                                   // 73\n                                                                                                                  // 74\n  // Backbone.Events                                                                                              // 75\n  // -----------------                                                                                            // 76\n                                                                                                                  // 77\n  // Regular expression used to split event strings                                                               // 78\n  var eventSplitter = /\\s+/;                                                                                      // 79\n                                                                                                                  // 80\n  // A module that can be mixed in to *any object* in order to provide it with                                    // 81\n  // custom events. You may bind with `on` or remove with `off` callback functions                                // 82\n  // to an event; trigger`-ing an event fires all callbacks in succession.                                        // 83\n  //                                                                                                              // 84\n  //     var object = {};                                                                                         // 85\n  //     _.extend(object, Backbone.Events);                                                                       // 86\n  //     object.on('expand', function(){ alert('expanded'); });                                                   // 87\n  //     object.trigger('expand');                                                                                // 88\n  //                                                                                                              // 89\n  var Events = Backbone.Events = {                                                                                // 90\n                                                                                                                  // 91\n    // Bind one or more space separated events, `events`, to a `callback`                                         // 92\n    // function. Passing `\"all\"` will bind the callback to all events fired.                                      // 93\n    on: function(events, callback, context) {                                                                     // 94\n                                                                                                                  // 95\n      var calls, event, node, tail, list;                                                                         // 96\n      if (!callback) return this;                                                                                 // 97\n      events = events.split(eventSplitter);                                                                       // 98\n      calls = this._callbacks || (this._callbacks = {});                                                          // 99\n                                                                                                                  // 100\n      // Create an immutable callback list, allowing traversal during                                             // 101\n      // modification.  The tail is an empty object that will always be used                                      // 102\n      // as the next node.                                                                                        // 103\n      while (event = events.shift()) {                                                                            // 104\n        list = calls[event];                                                                                      // 105\n        node = list ? list.tail : {};                                                                             // 106\n        node.next = tail = {};                                                                                    // 107\n        node.context = context;                                                                                   // 108\n        node.callback = callback;                                                                                 // 109\n        calls[event] = {tail: tail, next: list ? list.next : node};                                               // 110\n      }                                                                                                           // 111\n                                                                                                                  // 112\n      return this;                                                                                                // 113\n    },                                                                                                            // 114\n                                                                                                                  // 115\n    // Remove one or many callbacks. If `context` is null, removes all callbacks                                  // 116\n    // with that function. If `callback` is null, removes all callbacks for the                                   // 117\n    // event. If `events` is null, removes all bound callbacks for all events.                                    // 118\n    off: function(events, callback, context) {                                                                    // 119\n      var event, calls, node, tail, cb, ctx;                                                                      // 120\n                                                                                                                  // 121\n      // No events, or removing *all* events.                                                                     // 122\n      if (!(calls = this._callbacks)) return;                                                                     // 123\n      if (!(events || callback || context)) {                                                                     // 124\n        delete this._callbacks;                                                                                   // 125\n        return this;                                                                                              // 126\n      }                                                                                                           // 127\n                                                                                                                  // 128\n      // Loop through the listed events and contexts, splicing them out of the                                    // 129\n      // linked list of callbacks if appropriate.                                                                 // 130\n      events = events ? events.split(eventSplitter) : _.keys(calls);                                              // 131\n      while (event = events.shift()) {                                                                            // 132\n        node = calls[event];                                                                                      // 133\n        delete calls[event];                                                                                      // 134\n        if (!node || !(callback || context)) continue;                                                            // 135\n        // Create a new list, omitting the indicated callbacks.                                                   // 136\n        tail = node.tail;                                                                                         // 137\n        while ((node = node.next) !== tail) {                                                                     // 138\n          cb = node.callback;                                                                                     // 139\n          ctx = node.context;                                                                                     // 140\n          if ((callback && cb !== callback) || (context && ctx !== context)) {                                    // 141\n            this.on(event, cb, ctx);                                                                              // 142\n          }                                                                                                       // 143\n        }                                                                                                         // 144\n      }                                                                                                           // 145\n                                                                                                                  // 146\n      return this;                                                                                                // 147\n    },                                                                                                            // 148\n                                                                                                                  // 149\n    // Trigger one or many events, firing all bound callbacks. Callbacks are                                      // 150\n    // passed the same arguments as `trigger` is, apart from the event name                                       // 151\n    // (unless you're listening on `\"all\"`, which will cause your callback to                                     // 152\n    // receive the true name of the event as the first argument).                                                 // 153\n    trigger: function(events) {                                                                                   // 154\n      var event, node, calls, tail, args, all, rest;                                                              // 155\n      if (!(calls = this._callbacks)) return this;                                                                // 156\n      all = calls.all;                                                                                            // 157\n      events = events.split(eventSplitter);                                                                       // 158\n      rest = slice.call(arguments, 1);                                                                            // 159\n                                                                                                                  // 160\n      // For each event, walk through the linked list of callbacks twice,                                         // 161\n      // first to trigger the event, then to trigger any `\"all\"` callbacks.                                       // 162\n      while (event = events.shift()) {                                                                            // 163\n        if (node = calls[event]) {                                                                                // 164\n          tail = node.tail;                                                                                       // 165\n          while ((node = node.next) !== tail) {                                                                   // 166\n            node.callback.apply(node.context || this, rest);                                                      // 167\n          }                                                                                                       // 168\n        }                                                                                                         // 169\n        if (node = all) {                                                                                         // 170\n          tail = node.tail;                                                                                       // 171\n          args = [event].concat(rest);                                                                            // 172\n          while ((node = node.next) !== tail) {                                                                   // 173\n            node.callback.apply(node.context || this, args);                                                      // 174\n          }                                                                                                       // 175\n        }                                                                                                         // 176\n      }                                                                                                           // 177\n                                                                                                                  // 178\n      return this;                                                                                                // 179\n    }                                                                                                             // 180\n                                                                                                                  // 181\n  };                                                                                                              // 182\n                                                                                                                  // 183\n  // Aliases for backwards compatibility.                                                                         // 184\n  Events.bind   = Events.on;                                                                                      // 185\n  Events.unbind = Events.off;                                                                                     // 186\n                                                                                                                  // 187\n  // Backbone.Model                                                                                               // 188\n  // --------------                                                                                               // 189\n                                                                                                                  // 190\n  // Create a new model, with defined attributes. A client id (`cid`)                                             // 191\n  // is automatically generated and assigned for you.                                                             // 192\n  var Model = Backbone.Model = function(attributes, options) {                                                    // 193\n    var defaults;                                                                                                 // 194\n    attributes || (attributes = {});                                                                              // 195\n    if (options && options.parse) attributes = this.parse(attributes);                                            // 196\n    if (defaults = getValue(this, 'defaults')) {                                                                  // 197\n      attributes = _.extend({}, defaults, attributes);                                                            // 198\n    }                                                                                                             // 199\n    if (options && options.collection) this.collection = options.collection;                                      // 200\n    this.attributes = {};                                                                                         // 201\n    this._escapedAttributes = {};                                                                                 // 202\n    this.cid = _.uniqueId('c');                                                                                   // 203\n    this.changed = {};                                                                                            // 204\n    this._silent = {};                                                                                            // 205\n    this._pending = {};                                                                                           // 206\n    this.set(attributes, {silent: true});                                                                         // 207\n    // Reset change tracking.                                                                                     // 208\n    this.changed = {};                                                                                            // 209\n    this._silent = {};                                                                                            // 210\n    this._pending = {};                                                                                           // 211\n    this._previousAttributes = _.clone(this.attributes);                                                          // 212\n    this.initialize.apply(this, arguments);                                                                       // 213\n  };                                                                                                              // 214\n                                                                                                                  // 215\n  // Attach all inheritable methods to the Model prototype.                                                       // 216\n  _.extend(Model.prototype, Events, {                                                                             // 217\n                                                                                                                  // 218\n    // A hash of attributes whose current and previous value differ.                                              // 219\n    changed: null,                                                                                                // 220\n                                                                                                                  // 221\n    // A hash of attributes that have silently changed since the last time                                        // 222\n    // `change` was called.  Will become pending attributes on the next call.                                     // 223\n    _silent: null,                                                                                                // 224\n                                                                                                                  // 225\n    // A hash of attributes that have changed since the last `'change'` event                                     // 226\n    // began.                                                                                                     // 227\n    _pending: null,                                                                                               // 228\n                                                                                                                  // 229\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and                                        // 230\n    // CouchDB users may want to set this to `\"_id\"`.                                                             // 231\n    idAttribute: 'id',                                                                                            // 232\n                                                                                                                  // 233\n    // Initialize is an empty function by default. Override it with your own                                      // 234\n    // initialization logic.                                                                                      // 235\n    initialize: function(){},                                                                                     // 236\n                                                                                                                  // 237\n    // Return a copy of the model's `attributes` object.                                                          // 238\n    toJSON: function(options) {                                                                                   // 239\n      return _.clone(this.attributes);                                                                            // 240\n    },                                                                                                            // 241\n                                                                                                                  // 242\n    // Get the value of an attribute.                                                                             // 243\n    get: function(attr) {                                                                                         // 244\n      return this.attributes[attr];                                                                               // 245\n    },                                                                                                            // 246\n                                                                                                                  // 247\n    // Get the HTML-escaped value of an attribute.                                                                // 248\n    escape: function(attr) {                                                                                      // 249\n      var html;                                                                                                   // 250\n      if (html = this._escapedAttributes[attr]) return html;                                                      // 251\n      var val = this.get(attr);                                                                                   // 252\n      return this._escapedAttributes[attr] = _.escape(val == null ? '' : '' + val);                               // 253\n    },                                                                                                            // 254\n                                                                                                                  // 255\n    // Returns `true` if the attribute contains a value that is not null                                          // 256\n    // or undefined.                                                                                              // 257\n    has: function(attr) {                                                                                         // 258\n      return this.get(attr) != null;                                                                              // 259\n    },                                                                                                            // 260\n                                                                                                                  // 261\n    // Set a hash of model attributes on the object, firing `\"change\"` unless                                     // 262\n    // you choose to silence it.                                                                                  // 263\n    set: function(key, value, options) {                                                                          // 264\n      var attrs, attr, val;                                                                                       // 265\n                                                                                                                  // 266\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.                                          // 267\n      if (_.isObject(key) || key == null) {                                                                       // 268\n        attrs = key;                                                                                              // 269\n        options = value;                                                                                          // 270\n      } else {                                                                                                    // 271\n        attrs = {};                                                                                               // 272\n        attrs[key] = value;                                                                                       // 273\n      }                                                                                                           // 274\n                                                                                                                  // 275\n      // Extract attributes and options.                                                                          // 276\n      options || (options = {});                                                                                  // 277\n      if (!attrs) return this;                                                                                    // 278\n      if (attrs instanceof Model) attrs = attrs.attributes;                                                       // 279\n      if (options.unset) for (attr in attrs) attrs[attr] = void 0;                                                // 280\n                                                                                                                  // 281\n      // Run validation.                                                                                          // 282\n      if (!this._validate(attrs, options)) return false;                                                          // 283\n                                                                                                                  // 284\n      // Check for changes of `id`.                                                                               // 285\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];                                           // 286\n                                                                                                                  // 287\n      var changes = options.changes = {};                                                                         // 288\n      var now = this.attributes;                                                                                  // 289\n      var escaped = this._escapedAttributes;                                                                      // 290\n      var prev = this._previousAttributes || {};                                                                  // 291\n                                                                                                                  // 292\n      // For each `set` attribute...                                                                              // 293\n      for (attr in attrs) {                                                                                       // 294\n        val = attrs[attr];                                                                                        // 295\n                                                                                                                  // 296\n        // If the new and current value differ, record the change.                                                // 297\n        if (!_.isEqual(now[attr], val) || (options.unset && _.has(now, attr))) {                                  // 298\n          delete escaped[attr];                                                                                   // 299\n          (options.silent ? this._silent : changes)[attr] = true;                                                 // 300\n        }                                                                                                         // 301\n                                                                                                                  // 302\n        // Update or delete the current value.                                                                    // 303\n        options.unset ? delete now[attr] : now[attr] = val;                                                       // 304\n                                                                                                                  // 305\n        // If the new and previous value differ, record the change.  If not,                                      // 306\n        // then remove changes for this attribute.                                                                // 307\n        if (!_.isEqual(prev[attr], val) || (_.has(now, attr) != _.has(prev, attr))) {                             // 308\n          this.changed[attr] = val;                                                                               // 309\n          if (!options.silent) this._pending[attr] = true;                                                        // 310\n        } else {                                                                                                  // 311\n          delete this.changed[attr];                                                                              // 312\n          delete this._pending[attr];                                                                             // 313\n        }                                                                                                         // 314\n      }                                                                                                           // 315\n                                                                                                                  // 316\n      // Fire the `\"change\"` events.                                                                              // 317\n      if (!options.silent) this.change(options);                                                                  // 318\n      return this;                                                                                                // 319\n    },                                                                                                            // 320\n                                                                                                                  // 321\n    // Remove an attribute from the model, firing `\"change\"` unless you choose                                    // 322\n    // to silence it. `unset` is a noop if the attribute doesn't exist.                                           // 323\n    unset: function(attr, options) {                                                                              // 324\n      (options || (options = {})).unset = true;                                                                   // 325\n      return this.set(attr, null, options);                                                                       // 326\n    },                                                                                                            // 327\n                                                                                                                  // 328\n    // Clear all attributes on the model, firing `\"change\"` unless you choose                                     // 329\n    // to silence it.                                                                                             // 330\n    clear: function(options) {                                                                                    // 331\n      (options || (options = {})).unset = true;                                                                   // 332\n      return this.set(_.clone(this.attributes), options);                                                         // 333\n    },                                                                                                            // 334\n                                                                                                                  // 335\n    // Fetch the model from the server. If the server's representation of the                                     // 336\n    // model differs from its current attributes, they will be overriden,                                         // 337\n    // triggering a `\"change\"` event.                                                                             // 338\n    fetch: function(options) {                                                                                    // 339\n      options = options ? _.clone(options) : {};                                                                  // 340\n      var model = this;                                                                                           // 341\n      var success = options.success;                                                                              // 342\n      options.success = function(resp, status, xhr) {                                                             // 343\n        if (!model.set(model.parse(resp, xhr), options)) return false;                                            // 344\n        if (success) success(model, resp);                                                                        // 345\n      };                                                                                                          // 346\n      options.error = Backbone.wrapError(options.error, model, options);                                          // 347\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);                                      // 348\n    },                                                                                                            // 349\n                                                                                                                  // 350\n    // Set a hash of model attributes, and sync the model to the server.                                          // 351\n    // If the server returns an attributes hash that differs, the model's                                         // 352\n    // state will be `set` again.                                                                                 // 353\n    save: function(key, value, options) {                                                                         // 354\n      var attrs, current;                                                                                         // 355\n                                                                                                                  // 356\n      // Handle both `(\"key\", value)` and `({key: value})` -style calls.                                          // 357\n      if (_.isObject(key) || key == null) {                                                                       // 358\n        attrs = key;                                                                                              // 359\n        options = value;                                                                                          // 360\n      } else {                                                                                                    // 361\n        attrs = {};                                                                                               // 362\n        attrs[key] = value;                                                                                       // 363\n      }                                                                                                           // 364\n      options = options ? _.clone(options) : {};                                                                  // 365\n                                                                                                                  // 366\n      // If we're \"wait\"-ing to set changed attributes, validate early.                                           // 367\n      if (options.wait) {                                                                                         // 368\n        if (!this._validate(attrs, options)) return false;                                                        // 369\n        current = _.clone(this.attributes);                                                                       // 370\n      }                                                                                                           // 371\n                                                                                                                  // 372\n      // Regular saves `set` attributes before persisting to the server.                                          // 373\n      var silentOptions = _.extend({}, options, {silent: true});                                                  // 374\n      if (attrs && !this.set(attrs, options.wait ? silentOptions : options)) {                                    // 375\n        return false;                                                                                             // 376\n      }                                                                                                           // 377\n                                                                                                                  // 378\n      // After a successful server-side save, the client is (optionally)                                          // 379\n      // updated with the server-side state.                                                                      // 380\n      var model = this;                                                                                           // 381\n      var success = options.success;                                                                              // 382\n      options.success = function(resp, status, xhr) {                                                             // 383\n        var serverAttrs = model.parse(resp, xhr);                                                                 // 384\n        if (options.wait) {                                                                                       // 385\n          delete options.wait;                                                                                    // 386\n          serverAttrs = _.extend(attrs || {}, serverAttrs);                                                       // 387\n        }                                                                                                         // 388\n        if (!model.set(serverAttrs, options)) return false;                                                       // 389\n        if (success) {                                                                                            // 390\n          success(model, resp);                                                                                   // 391\n        } else {                                                                                                  // 392\n          model.trigger('sync', model, resp, options);                                                            // 393\n        }                                                                                                         // 394\n      };                                                                                                          // 395\n                                                                                                                  // 396\n      // Finish configuring and sending the Ajax request.                                                         // 397\n      options.error = Backbone.wrapError(options.error, model, options);                                          // 398\n      var method = this.isNew() ? 'create' : 'update';                                                            // 399\n      var xhr = (this.sync || Backbone.sync).call(this, method, this, options);                                   // 400\n      if (options.wait) this.set(current, silentOptions);                                                         // 401\n      return xhr;                                                                                                 // 402\n    },                                                                                                            // 403\n                                                                                                                  // 404\n    // Destroy this model on the server if it was already persisted.                                              // 405\n    // Optimistically removes the model from its collection, if it has one.                                       // 406\n    // If `wait: true` is passed, waits for the server to respond before removal.                                 // 407\n    destroy: function(options) {                                                                                  // 408\n      options = options ? _.clone(options) : {};                                                                  // 409\n      var model = this;                                                                                           // 410\n      var success = options.success;                                                                              // 411\n                                                                                                                  // 412\n      var triggerDestroy = function() {                                                                           // 413\n        model.trigger('destroy', model, model.collection, options);                                               // 414\n      };                                                                                                          // 415\n                                                                                                                  // 416\n      if (this.isNew()) {                                                                                         // 417\n        triggerDestroy();                                                                                         // 418\n        return false;                                                                                             // 419\n      }                                                                                                           // 420\n                                                                                                                  // 421\n      options.success = function(resp) {                                                                          // 422\n        if (options.wait) triggerDestroy();                                                                       // 423\n        if (success) {                                                                                            // 424\n          success(model, resp);                                                                                   // 425\n        } else {                                                                                                  // 426\n          model.trigger('sync', model, resp, options);                                                            // 427\n        }                                                                                                         // 428\n      };                                                                                                          // 429\n                                                                                                                  // 430\n      options.error = Backbone.wrapError(options.error, model, options);                                          // 431\n      var xhr = (this.sync || Backbone.sync).call(this, 'delete', this, options);                                 // 432\n      if (!options.wait) triggerDestroy();                                                                        // 433\n      return xhr;                                                                                                 // 434\n    },                                                                                                            // 435\n                                                                                                                  // 436\n    // Default URL for the model's representation on the server -- if you're                                      // 437\n    // using Backbone's restful methods, override this to change the endpoint                                     // 438\n    // that will be called.                                                                                       // 439\n    url: function() {                                                                                             // 440\n      var base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();                     // 441\n      if (this.isNew()) return base;                                                                              // 442\n      return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + encodeURIComponent(this.id);               // 443\n    },                                                                                                            // 444\n                                                                                                                  // 445\n    // **parse** converts a response into the hash of attributes to be `set` on                                   // 446\n    // the model. The default implementation is just to pass the response along.                                  // 447\n    parse: function(resp, xhr) {                                                                                  // 448\n      return resp;                                                                                                // 449\n    },                                                                                                            // 450\n                                                                                                                  // 451\n    // Create a new model with identical attributes to this one.                                                  // 452\n    clone: function() {                                                                                           // 453\n      return new this.constructor(this.attributes);                                                               // 454\n    },                                                                                                            // 455\n                                                                                                                  // 456\n    // A model is new if it has never been saved to the server, and lacks an id.                                  // 457\n    isNew: function() {                                                                                           // 458\n      return this.id == null;                                                                                     // 459\n    },                                                                                                            // 460\n                                                                                                                  // 461\n    // Call this method to manually fire a `\"change\"` event for this model and                                    // 462\n    // a `\"change:attribute\"` event for each changed attribute.                                                   // 463\n    // Calling this will cause all objects observing the model to update.                                         // 464\n    change: function(options) {                                                                                   // 465\n      options || (options = {});                                                                                  // 466\n      var changing = this._changing;                                                                              // 467\n      this._changing = true;                                                                                      // 468\n                                                                                                                  // 469\n      // Silent changes become pending changes.                                                                   // 470\n      for (var attr in this._silent) this._pending[attr] = true;                                                  // 471\n                                                                                                                  // 472\n      // Silent changes are triggered.                                                                            // 473\n      var changes = _.extend({}, options.changes, this._silent);                                                  // 474\n      this._silent = {};                                                                                          // 475\n      for (var attr in changes) {                                                                                 // 476\n        this.trigger('change:' + attr, this, this.get(attr), options);                                            // 477\n      }                                                                                                           // 478\n      if (changing) return this;                                                                                  // 479\n                                                                                                                  // 480\n      // Continue firing `\"change\"` events while there are pending changes.                                       // 481\n      while (!_.isEmpty(this._pending)) {                                                                         // 482\n        this._pending = {};                                                                                       // 483\n        this.trigger('change', this, options);                                                                    // 484\n        // Pending and silent changes still remain.                                                               // 485\n        for (var attr in this.changed) {                                                                          // 486\n          if (this._pending[attr] || this._silent[attr]) continue;                                                // 487\n          delete this.changed[attr];                                                                              // 488\n        }                                                                                                         // 489\n        this._previousAttributes = _.clone(this.attributes);                                                      // 490\n      }                                                                                                           // 491\n                                                                                                                  // 492\n      this._changing = false;                                                                                     // 493\n      return this;                                                                                                // 494\n    },                                                                                                            // 495\n                                                                                                                  // 496\n    // Determine if the model has changed since the last `\"change\"` event.                                        // 497\n    // If you specify an attribute name, determine if that attribute has changed.                                 // 498\n    hasChanged: function(attr) {                                                                                  // 499\n      if (!arguments.length) return !_.isEmpty(this.changed);                                                     // 500\n      return _.has(this.changed, attr);                                                                           // 501\n    },                                                                                                            // 502\n                                                                                                                  // 503\n    // Return an object containing all the attributes that have changed, or                                       // 504\n    // false if there are no changed attributes. Useful for determining what                                      // 505\n    // parts of a view need to be updated and/or what attributes need to be                                       // 506\n    // persisted to the server. Unset attributes will be set to undefined.                                        // 507\n    // You can also pass an attributes object to diff against the model,                                          // 508\n    // determining if there *would be* a change.                                                                  // 509\n    changedAttributes: function(diff) {                                                                           // 510\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;                                        // 511\n      var val, changed = false, old = this._previousAttributes;                                                   // 512\n      for (var attr in diff) {                                                                                    // 513\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;                                                   // 514\n        (changed || (changed = {}))[attr] = val;                                                                  // 515\n      }                                                                                                           // 516\n      return changed;                                                                                             // 517\n    },                                                                                                            // 518\n                                                                                                                  // 519\n    // Get the previous value of an attribute, recorded at the time the last                                      // 520\n    // `\"change\"` event was fired.                                                                                // 521\n    previous: function(attr) {                                                                                    // 522\n      if (!arguments.length || !this._previousAttributes) return null;                                            // 523\n      return this._previousAttributes[attr];                                                                      // 524\n    },                                                                                                            // 525\n                                                                                                                  // 526\n    // Get all of the attributes of the model at the time of the previous                                         // 527\n    // `\"change\"` event.                                                                                          // 528\n    previousAttributes: function() {                                                                              // 529\n      return _.clone(this._previousAttributes);                                                                   // 530\n    },                                                                                                            // 531\n                                                                                                                  // 532\n    // Check if the model is currently in a valid state. It's only possible to                                    // 533\n    // get into an *invalid* state if you're using silent changes.                                                // 534\n    isValid: function() {                                                                                         // 535\n      return !this.validate(this.attributes);                                                                     // 536\n    },                                                                                                            // 537\n                                                                                                                  // 538\n    // Run validation against the next complete set of model attributes,                                          // 539\n    // returning `true` if all is well. If a specific `error` callback has                                        // 540\n    // been passed, call that instead of firing the general `\"error\"` event.                                      // 541\n    _validate: function(attrs, options) {                                                                         // 542\n      if (options.silent || !this.validate) return true;                                                          // 543\n      attrs = _.extend({}, this.attributes, attrs);                                                               // 544\n      var error = this.validate(attrs, options);                                                                  // 545\n      if (!error) return true;                                                                                    // 546\n      if (options && options.error) {                                                                             // 547\n        options.error(this, error, options);                                                                      // 548\n      } else {                                                                                                    // 549\n        this.trigger('error', this, error, options);                                                              // 550\n      }                                                                                                           // 551\n      return false;                                                                                               // 552\n    }                                                                                                             // 553\n                                                                                                                  // 554\n  });                                                                                                             // 555\n                                                                                                                  // 556\n  // Backbone.Collection                                                                                          // 557\n  // -------------------                                                                                          // 558\n                                                                                                                  // 559\n  // Provides a standard collection class for our sets of models, ordered                                         // 560\n  // or unordered. If a `comparator` is specified, the Collection will maintain                                   // 561\n  // its models in sort order, as they're added and removed.                                                      // 562\n  var Collection = Backbone.Collection = function(models, options) {                                              // 563\n    options || (options = {});                                                                                    // 564\n    if (options.model) this.model = options.model;                                                                // 565\n    if (options.comparator) this.comparator = options.comparator;                                                 // 566\n    this._reset();                                                                                                // 567\n    this.initialize.apply(this, arguments);                                                                       // 568\n    if (models) this.reset(models, {silent: true, parse: options.parse});                                         // 569\n  };                                                                                                              // 570\n                                                                                                                  // 571\n  // Define the Collection's inheritable methods.                                                                 // 572\n  _.extend(Collection.prototype, Events, {                                                                        // 573\n                                                                                                                  // 574\n    // The default model for a collection is just a **Backbone.Model**.                                           // 575\n    // This should be overridden in most cases.                                                                   // 576\n    model: Model,                                                                                                 // 577\n                                                                                                                  // 578\n    // Initialize is an empty function by default. Override it with your own                                      // 579\n    // initialization logic.                                                                                      // 580\n    initialize: function(){},                                                                                     // 581\n                                                                                                                  // 582\n    // The JSON representation of a Collection is an array of the                                                 // 583\n    // models' attributes.                                                                                        // 584\n    toJSON: function(options) {                                                                                   // 585\n      return this.map(function(model){ return model.toJSON(options); });                                          // 586\n    },                                                                                                            // 587\n                                                                                                                  // 588\n    // Add a model, or list of models to the set. Pass **silent** to avoid                                        // 589\n    // firing the `add` event for every new model.                                                                // 590\n    add: function(models, options) {                                                                              // 591\n      var i, index, length, model, cid, id, cids = {}, ids = {}, dups = [];                                       // 592\n      options || (options = {});                                                                                  // 593\n      models = _.isArray(models) ? models.slice() : [models];                                                     // 594\n                                                                                                                  // 595\n      // Begin by turning bare objects into model references, and preventing                                      // 596\n      // invalid models or duplicate models from being added.                                                     // 597\n      for (i = 0, length = models.length; i < length; i++) {                                                      // 598\n        if (!(model = models[i] = this._prepareModel(models[i], options))) {                                      // 599\n          throw new Error(\"Can't add an invalid model to a collection\");                                          // 600\n        }                                                                                                         // 601\n        cid = model.cid;                                                                                          // 602\n        id = model.id;                                                                                            // 603\n        if (cids[cid] || this._byCid[cid] || ((id != null) && (ids[id] || this._byId[id]))) {                     // 604\n          dups.push(i);                                                                                           // 605\n          continue;                                                                                               // 606\n        }                                                                                                         // 607\n        cids[cid] = ids[id] = model;                                                                              // 608\n      }                                                                                                           // 609\n                                                                                                                  // 610\n      // Remove duplicates.                                                                                       // 611\n      i = dups.length;                                                                                            // 612\n      while (i--) {                                                                                               // 613\n        models.splice(dups[i], 1);                                                                                // 614\n      }                                                                                                           // 615\n                                                                                                                  // 616\n      // Listen to added models' events, and index models for lookup by                                           // 617\n      // `id` and by `cid`.                                                                                       // 618\n      for (i = 0, length = models.length; i < length; i++) {                                                      // 619\n        (model = models[i]).on('all', this._onModelEvent, this);                                                  // 620\n        this._byCid[model.cid] = model;                                                                           // 621\n        if (model.id != null) this._byId[model.id] = model;                                                       // 622\n      }                                                                                                           // 623\n                                                                                                                  // 624\n      // Insert models into the collection, re-sorting if needed, and triggering                                  // 625\n      // `add` events unless silenced.                                                                            // 626\n      this.length += length;                                                                                      // 627\n      index = options.at != null ? options.at : this.models.length;                                               // 628\n      splice.apply(this.models, [index, 0].concat(models));                                                       // 629\n      if (this.comparator) this.sort({silent: true});                                                             // 630\n      if (options.silent) return this;                                                                            // 631\n      for (i = 0, length = this.models.length; i < length; i++) {                                                 // 632\n        if (!cids[(model = this.models[i]).cid]) continue;                                                        // 633\n        options.index = i;                                                                                        // 634\n        model.trigger('add', model, this, options);                                                               // 635\n      }                                                                                                           // 636\n      return this;                                                                                                // 637\n    },                                                                                                            // 638\n                                                                                                                  // 639\n    // Remove a model, or a list of models from the set. Pass silent to avoid                                     // 640\n    // firing the `remove` event for every model removed.                                                         // 641\n    remove: function(models, options) {                                                                           // 642\n      var i, l, index, model;                                                                                     // 643\n      options || (options = {});                                                                                  // 644\n      models = _.isArray(models) ? models.slice() : [models];                                                     // 645\n      for (i = 0, l = models.length; i < l; i++) {                                                                // 646\n        model = this.getByCid(models[i]) || this.get(models[i]);                                                  // 647\n        if (!model) continue;                                                                                     // 648\n        delete this._byId[model.id];                                                                              // 649\n        delete this._byCid[model.cid];                                                                            // 650\n        index = this.indexOf(model);                                                                              // 651\n        this.models.splice(index, 1);                                                                             // 652\n        this.length--;                                                                                            // 653\n        if (!options.silent) {                                                                                    // 654\n          options.index = index;                                                                                  // 655\n          model.trigger('remove', model, this, options);                                                          // 656\n        }                                                                                                         // 657\n        this._removeReference(model);                                                                             // 658\n      }                                                                                                           // 659\n      return this;                                                                                                // 660\n    },                                                                                                            // 661\n                                                                                                                  // 662\n    // Add a model to the end of the collection.                                                                  // 663\n    push: function(model, options) {                                                                              // 664\n      model = this._prepareModel(model, options);                                                                 // 665\n      this.add(model, options);                                                                                   // 666\n      return model;                                                                                               // 667\n    },                                                                                                            // 668\n                                                                                                                  // 669\n    // Remove a model from the end of the collection.                                                             // 670\n    pop: function(options) {                                                                                      // 671\n      var model = this.at(this.length - 1);                                                                       // 672\n      this.remove(model, options);                                                                                // 673\n      return model;                                                                                               // 674\n    },                                                                                                            // 675\n                                                                                                                  // 676\n    // Add a model to the beginning of the collection.                                                            // 677\n    unshift: function(model, options) {                                                                           // 678\n      model = this._prepareModel(model, options);                                                                 // 679\n      this.add(model, _.extend({at: 0}, options));                                                                // 680\n      return model;                                                                                               // 681\n    },                                                                                                            // 682\n                                                                                                                  // 683\n    // Remove a model from the beginning of the collection.                                                       // 684\n    shift: function(options) {                                                                                    // 685\n      var model = this.at(0);                                                                                     // 686\n      this.remove(model, options);                                                                                // 687\n      return model;                                                                                               // 688\n    },                                                                                                            // 689\n                                                                                                                  // 690\n    // Get a model from the set by id.                                                                            // 691\n    get: function(id) {                                                                                           // 692\n      if (id == null) return void 0;                                                                              // 693\n      return this._byId[id.id != null ? id.id : id];                                                              // 694\n    },                                                                                                            // 695\n                                                                                                                  // 696\n    // Get a model from the set by client id.                                                                     // 697\n    getByCid: function(cid) {                                                                                     // 698\n      return cid && this._byCid[cid.cid || cid];                                                                  // 699\n    },                                                                                                            // 700\n                                                                                                                  // 701\n    // Get the model at the given index.                                                                          // 702\n    at: function(index) {                                                                                         // 703\n      return this.models[index];                                                                                  // 704\n    },                                                                                                            // 705\n                                                                                                                  // 706\n    // Return models with matching attributes. Useful for simple cases of `filter`.                               // 707\n    where: function(attrs) {                                                                                      // 708\n      if (_.isEmpty(attrs)) return [];                                                                            // 709\n      return this.filter(function(model) {                                                                        // 710\n        for (var key in attrs) {                                                                                  // 711\n          if (attrs[key] !== model.get(key)) return false;                                                        // 712\n        }                                                                                                         // 713\n        return true;                                                                                              // 714\n      });                                                                                                         // 715\n    },                                                                                                            // 716\n                                                                                                                  // 717\n    // Force the collection to re-sort itself. You don't need to call this under                                  // 718\n    // normal circumstances, as the set will maintain sort order as each item                                     // 719\n    // is added.                                                                                                  // 720\n    sort: function(options) {                                                                                     // 721\n      options || (options = {});                                                                                  // 722\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');                            // 723\n      var boundComparator = _.bind(this.comparator, this);                                                        // 724\n      if (this.comparator.length == 1) {                                                                          // 725\n        this.models = this.sortBy(boundComparator);                                                               // 726\n      } else {                                                                                                    // 727\n        this.models.sort(boundComparator);                                                                        // 728\n      }                                                                                                           // 729\n      if (!options.silent) this.trigger('reset', this, options);                                                  // 730\n      return this;                                                                                                // 731\n    },                                                                                                            // 732\n                                                                                                                  // 733\n    // Pluck an attribute from each model in the collection.                                                      // 734\n    pluck: function(attr) {                                                                                       // 735\n      return _.map(this.models, function(model){ return model.get(attr); });                                      // 736\n    },                                                                                                            // 737\n                                                                                                                  // 738\n    // When you have more items than you want to add or remove individually,                                      // 739\n    // you can reset the entire set with a new list of models, without firing                                     // 740\n    // any `add` or `remove` events. Fires `reset` when finished.                                                 // 741\n    reset: function(models, options) {                                                                            // 742\n      models  || (models = []);                                                                                   // 743\n      options || (options = {});                                                                                  // 744\n      for (var i = 0, l = this.models.length; i < l; i++) {                                                       // 745\n        this._removeReference(this.models[i]);                                                                    // 746\n      }                                                                                                           // 747\n      this._reset();                                                                                              // 748\n      this.add(models, _.extend({silent: true}, options));                                                        // 749\n      if (!options.silent) this.trigger('reset', this, options);                                                  // 750\n      return this;                                                                                                // 751\n    },                                                                                                            // 752\n                                                                                                                  // 753\n    // Fetch the default set of models for this collection, resetting the                                         // 754\n    // collection when they arrive. If `add: true` is passed, appends the                                         // 755\n    // models to the collection instead of resetting.                                                             // 756\n    fetch: function(options) {                                                                                    // 757\n      options = options ? _.clone(options) : {};                                                                  // 758\n      if (options.parse === undefined) options.parse = true;                                                      // 759\n      var collection = this;                                                                                      // 760\n      var success = options.success;                                                                              // 761\n      options.success = function(resp, status, xhr) {                                                             // 762\n        collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);                          // 763\n        if (success) success(collection, resp);                                                                   // 764\n      };                                                                                                          // 765\n      options.error = Backbone.wrapError(options.error, collection, options);                                     // 766\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);                                      // 767\n    },                                                                                                            // 768\n                                                                                                                  // 769\n    // Create a new instance of a model in this collection. Add the model to the                                  // 770\n    // collection immediately, unless `wait: true` is passed, in which case we                                    // 771\n    // wait for the server to agree.                                                                              // 772\n    create: function(model, options) {                                                                            // 773\n      var coll = this;                                                                                            // 774\n      options = options ? _.clone(options) : {};                                                                  // 775\n      model = this._prepareModel(model, options);                                                                 // 776\n      if (!model) return false;                                                                                   // 777\n      if (!options.wait) coll.add(model, options);                                                                // 778\n      var success = options.success;                                                                              // 779\n      options.success = function(nextModel, resp, xhr) {                                                          // 780\n        if (options.wait) coll.add(nextModel, options);                                                           // 781\n        if (success) {                                                                                            // 782\n          success(nextModel, resp);                                                                               // 783\n        } else {                                                                                                  // 784\n          nextModel.trigger('sync', model, resp, options);                                                        // 785\n        }                                                                                                         // 786\n      };                                                                                                          // 787\n      model.save(null, options);                                                                                  // 788\n      return model;                                                                                               // 789\n    },                                                                                                            // 790\n                                                                                                                  // 791\n    // **parse** converts a response into a list of models to be added to the                                     // 792\n    // collection. The default implementation is just to pass it through.                                         // 793\n    parse: function(resp, xhr) {                                                                                  // 794\n      return resp;                                                                                                // 795\n    },                                                                                                            // 796\n                                                                                                                  // 797\n    // Proxy to _'s chain. Can't be proxied the same way the rest of the                                          // 798\n    // underscore methods are proxied because it relies on the underscore                                         // 799\n    // constructor.                                                                                               // 800\n    chain: function () {                                                                                          // 801\n      return _(this.models).chain();                                                                              // 802\n    },                                                                                                            // 803\n                                                                                                                  // 804\n    // Reset all internal state. Called when the collection is reset.                                             // 805\n    _reset: function(options) {                                                                                   // 806\n      this.length = 0;                                                                                            // 807\n      this.models = [];                                                                                           // 808\n      this._byId  = {};                                                                                           // 809\n      this._byCid = {};                                                                                           // 810\n    },                                                                                                            // 811\n                                                                                                                  // 812\n    // Prepare a model or hash of attributes to be added to this collection.                                      // 813\n    _prepareModel: function(model, options) {                                                                     // 814\n      options || (options = {});                                                                                  // 815\n      if (!(model instanceof Model)) {                                                                            // 816\n        var attrs = model;                                                                                        // 817\n        options.collection = this;                                                                                // 818\n        model = new this.model(attrs, options);                                                                   // 819\n        if (!model._validate(model.attributes, options)) model = false;                                           // 820\n      } else if (!model.collection) {                                                                             // 821\n        model.collection = this;                                                                                  // 822\n      }                                                                                                           // 823\n      return model;                                                                                               // 824\n    },                                                                                                            // 825\n                                                                                                                  // 826\n    // Internal method to remove a model's ties to a collection.                                                  // 827\n    _removeReference: function(model) {                                                                           // 828\n      if (this == model.collection) {                                                                             // 829\n        delete model.collection;                                                                                  // 830\n      }                                                                                                           // 831\n      model.off('all', this._onModelEvent, this);                                                                 // 832\n    },                                                                                                            // 833\n                                                                                                                  // 834\n    // Internal method called every time a model in the set fires an event.                                       // 835\n    // Sets need to update their indexes when models change ids. All other                                        // 836\n    // events simply proxy through. \"add\" and \"remove\" events that originate                                      // 837\n    // in other collections are ignored.                                                                          // 838\n    _onModelEvent: function(event, model, collection, options) {                                                  // 839\n      if ((event == 'add' || event == 'remove') && collection != this) return;                                    // 840\n      if (event == 'destroy') {                                                                                   // 841\n        this.remove(model, options);                                                                              // 842\n      }                                                                                                           // 843\n      if (model && event === 'change:' + model.idAttribute) {                                                     // 844\n        delete this._byId[model.previous(model.idAttribute)];                                                     // 845\n        this._byId[model.id] = model;                                                                             // 846\n      }                                                                                                           // 847\n      this.trigger.apply(this, arguments);                                                                        // 848\n    }                                                                                                             // 849\n                                                                                                                  // 850\n  });                                                                                                             // 851\n                                                                                                                  // 852\n  // Underscore methods that we want to implement on the Collection.                                              // 853\n  var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',                                       // 854\n    'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',                                        // 855\n    'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',                                       // 856\n    'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',                                  // 857\n    'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];                                                              // 858\n                                                                                                                  // 859\n  // Mix in each Underscore method as a proxy to `Collection#models`.                                             // 860\n  _.each(methods, function(method) {                                                                              // 861\n    Collection.prototype[method] = function() {                                                                   // 862\n      return _[method].apply(_, [this.models].concat(_.toArray(arguments)));                                      // 863\n    };                                                                                                            // 864\n  });                                                                                                             // 865\n                                                                                                                  // 866\n  // Backbone.Router                                                                                              // 867\n  // -------------------                                                                                          // 868\n                                                                                                                  // 869\n  // Routers map faux-URLs to actions, and fire events when routes are                                            // 870\n  // matched. Creating a new one sets its `routes` hash, if not set statically.                                   // 871\n  var Router = Backbone.Router = function(options) {                                                              // 872\n    options || (options = {});                                                                                    // 873\n    if (options.routes) this.routes = options.routes;                                                             // 874\n    this._bindRoutes();                                                                                           // 875\n    this.initialize.apply(this, arguments);                                                                       // 876\n  };                                                                                                              // 877\n                                                                                                                  // 878\n  // Cached regular expressions for matching named param parts and splatted                                       // 879\n  // parts of route strings.                                                                                      // 880\n  var namedParam    = /:\\w+/g;                                                                                    // 881\n  var splatParam    = /\\*\\w+/g;                                                                                   // 882\n  var escapeRegExp  = /[-[\\]{}()+?.,\\\\^$|#\\s]/g;                                                                  // 883\n                                                                                                                  // 884\n  // Set up all inheritable **Backbone.Router** properties and methods.                                           // 885\n  _.extend(Router.prototype, Events, {                                                                            // 886\n                                                                                                                  // 887\n    // Initialize is an empty function by default. Override it with your own                                      // 888\n    // initialization logic.                                                                                      // 889\n    initialize: function(){},                                                                                     // 890\n                                                                                                                  // 891\n    // Manually bind a single named route to a callback. For example:                                             // 892\n    //                                                                                                            // 893\n    //     this.route('search/:query/p:num', 'search', function(query, num) {                                     // 894\n    //       ...                                                                                                  // 895\n    //     });                                                                                                    // 896\n    //                                                                                                            // 897\n    route: function(route, name, callback) {                                                                      // 898\n      Backbone.history || (Backbone.history = new History);                                                       // 899\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);                                                 // 900\n      if (!callback) callback = this[name];                                                                       // 901\n      Backbone.history.route(route, _.bind(function(fragment) {                                                   // 902\n        var args = this._extractParameters(route, fragment);                                                      // 903\n        callback && callback.apply(this, args);                                                                   // 904\n        this.trigger.apply(this, ['route:' + name].concat(args));                                                 // 905\n        Backbone.history.trigger('route', this, name, args);                                                      // 906\n      }, this));                                                                                                  // 907\n      return this;                                                                                                // 908\n    },                                                                                                            // 909\n                                                                                                                  // 910\n    // Simple proxy to `Backbone.history` to save a fragment into the history.                                    // 911\n    navigate: function(fragment, options) {                                                                       // 912\n      Backbone.history.navigate(fragment, options);                                                               // 913\n    },                                                                                                            // 914\n                                                                                                                  // 915\n    // Bind all defined routes to `Backbone.history`. We have to reverse the                                      // 916\n    // order of the routes here to support behavior where the most general                                        // 917\n    // routes can be defined at the bottom of the route map.                                                      // 918\n    _bindRoutes: function() {                                                                                     // 919\n      if (!this.routes) return;                                                                                   // 920\n      var routes = [];                                                                                            // 921\n      for (var route in this.routes) {                                                                            // 922\n        routes.unshift([route, this.routes[route]]);                                                              // 923\n      }                                                                                                           // 924\n      for (var i = 0, l = routes.length; i < l; i++) {                                                            // 925\n        this.route(routes[i][0], routes[i][1], this[routes[i][1]]);                                               // 926\n      }                                                                                                           // 927\n    },                                                                                                            // 928\n                                                                                                                  // 929\n    // Convert a route string into a regular expression, suitable for matching                                    // 930\n    // against the current location hash.                                                                         // 931\n    _routeToRegExp: function(route) {                                                                             // 932\n      route = route.replace(escapeRegExp, '\\\\$&')                                                                 // 933\n                   .replace(namedParam, '([^\\/]+)')                                                               // 934\n                   .replace(splatParam, '(.*?)');                                                                 // 935\n      return new RegExp('^' + route + '$');                                                                       // 936\n    },                                                                                                            // 937\n                                                                                                                  // 938\n    // Given a route, and a URL fragment that it matches, return the array of                                     // 939\n    // extracted parameters.                                                                                      // 940\n    _extractParameters: function(route, fragment) {                                                               // 941\n      return route.exec(fragment).slice(1);                                                                       // 942\n    }                                                                                                             // 943\n                                                                                                                  // 944\n  });                                                                                                             // 945\n                                                                                                                  // 946\n  // Backbone.History                                                                                             // 947\n  // ----------------                                                                                             // 948\n                                                                                                                  // 949\n  // Handles cross-browser history management, based on URL fragments. If the                                     // 950\n  // browser does not support `onhashchange`, falls back to polling.                                              // 951\n  var History = Backbone.History = function() {                                                                   // 952\n    this.handlers = [];                                                                                           // 953\n    _.bindAll(this, 'checkUrl');                                                                                  // 954\n  };                                                                                                              // 955\n                                                                                                                  // 956\n  // Cached regex for cleaning leading hashes and slashes .                                                       // 957\n  var routeStripper = /^[#\\/]/;                                                                                   // 958\n                                                                                                                  // 959\n  // Cached regex for detecting MSIE.                                                                             // 960\n  var isExplorer = /msie [\\w.]+/;                                                                                 // 961\n                                                                                                                  // 962\n  // Has the history handling already been started?                                                               // 963\n  History.started = false;                                                                                        // 964\n                                                                                                                  // 965\n  // Set up all inheritable **Backbone.History** properties and methods.                                          // 966\n  _.extend(History.prototype, Events, {                                                                           // 967\n                                                                                                                  // 968\n    // The default interval to poll for hash changes, if necessary, is                                            // 969\n    // twenty times a second.                                                                                     // 970\n    interval: 50,                                                                                                 // 971\n                                                                                                                  // 972\n    // Gets the true hash value. Cannot use location.hash directly due to bug                                     // 973\n    // in Firefox where location.hash will always be decoded.                                                     // 974\n    getHash: function(windowOverride) {                                                                           // 975\n      var loc = windowOverride ? windowOverride.location : window.location;                                       // 976\n      var match = loc.href.match(/#(.*)$/);                                                                       // 977\n      return match ? match[1] : '';                                                                               // 978\n    },                                                                                                            // 979\n                                                                                                                  // 980\n    // Get the cross-browser normalized URL fragment, either from the URL,                                        // 981\n    // the hash, or the override.                                                                                 // 982\n    getFragment: function(fragment, forcePushState) {                                                             // 983\n      if (fragment == null) {                                                                                     // 984\n        if (this._hasPushState || forcePushState) {                                                               // 985\n          fragment = window.location.pathname;                                                                    // 986\n          var search = window.location.search;                                                                    // 987\n          if (search) fragment += search;                                                                         // 988\n        } else {                                                                                                  // 989\n          fragment = this.getHash();                                                                              // 990\n        }                                                                                                         // 991\n      }                                                                                                           // 992\n      if (!fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);             // 993\n      return fragment.replace(routeStripper, '');                                                                 // 994\n    },                                                                                                            // 995\n                                                                                                                  // 996\n    // Start the hash change handling, returning `true` if the current URL matches                                // 997\n    // an existing route, and `false` otherwise.                                                                  // 998\n    start: function(options) {                                                                                    // 999\n      if (History.started) throw new Error(\"Backbone.history has already been started\");                          // 1000\n      // <METEOR>                                                                                                 // 1001\n      if (typeof window === 'undefined')                                                                          // 1002\n        throw new Error(\"Backbone.History is client-only, can't start on the server\");                            // 1003\n      // </METEOR>                                                                                                // 1004\n      History.started = true;                                                                                     // 1005\n                                                                                                                  // 1006\n      // Figure out the initial configuration. Do we need an iframe?                                              // 1007\n      // Is pushState desired ... is it available?                                                                // 1008\n      this.options          = _.extend({}, {root: '/'}, this.options, options);                                   // 1009\n      this._wantsHashChange = this.options.hashChange !== false;                                                  // 1010\n      this._wantsPushState  = !!this.options.pushState;                                                           // 1011\n      this._hasPushState    = !!(this.options.pushState && window.history && window.history.pushState);           // 1012\n      var fragment          = this.getFragment();                                                                 // 1013\n      var docMode           = document.documentMode;                                                              // 1014\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7)); // 1015\n                                                                                                                  // 1016\n      if (oldIE) {                                                                                                // 1017\n        this.iframe = $('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;  // 1018\n        this.navigate(fragment);                                                                                  // 1019\n      }                                                                                                           // 1020\n                                                                                                                  // 1021\n      // Depending on whether we're using pushState or hashes, and whether                                        // 1022\n      // 'onhashchange' is supported, determine how we check the URL state.                                       // 1023\n      if (this._hasPushState) {                                                                                   // 1024\n        $(window).bind('popstate', this.checkUrl);                                                                // 1025\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {                                 // 1026\n        $(window).bind('hashchange', this.checkUrl);                                                              // 1027\n      } else if (this._wantsHashChange) {                                                                         // 1028\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);                                       // 1029\n      }                                                                                                           // 1030\n                                                                                                                  // 1031\n      // Determine if we need to change the base url, for a pushState link                                        // 1032\n      // opened by a non-pushState browser.                                                                       // 1033\n      this.fragment = fragment;                                                                                   // 1034\n      var loc = window.location;                                                                                  // 1035\n      var atRoot  = loc.pathname == this.options.root;                                                            // 1036\n                                                                                                                  // 1037\n      // If we've started off with a route from a `pushState`-enabled browser,                                    // 1038\n      // but we're currently in a browser that doesn't support it...                                              // 1039\n      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {                      // 1040\n        this.fragment = this.getFragment(null, true);                                                             // 1041\n        window.location.replace(this.options.root + '#' + this.fragment);                                         // 1042\n        // Return immediately as browser will do redirect to new url                                              // 1043\n        return true;                                                                                              // 1044\n                                                                                                                  // 1045\n      // Or if we've started out with a hash-based route, but we're currently                                     // 1046\n      // in a browser where it could be `pushState`-based instead...                                              // 1047\n      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {                              // 1048\n        this.fragment = this.getHash().replace(routeStripper, '');                                                // 1049\n        window.history.replaceState({}, document.title, loc.protocol + '//' + loc.host + this.options.root + this.fragment);\n      }                                                                                                           // 1051\n                                                                                                                  // 1052\n      if (!this.options.silent) {                                                                                 // 1053\n        return this.loadUrl();                                                                                    // 1054\n      }                                                                                                           // 1055\n    },                                                                                                            // 1056\n                                                                                                                  // 1057\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,                                   // 1058\n    // but possibly useful for unit testing Routers.                                                              // 1059\n    stop: function() {                                                                                            // 1060\n      $(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);                            // 1061\n      clearInterval(this._checkUrlInterval);                                                                      // 1062\n      History.started = false;                                                                                    // 1063\n    },                                                                                                            // 1064\n                                                                                                                  // 1065\n    // Add a route to be tested when the fragment changes. Routes added later                                     // 1066\n    // may override previous routes.                                                                              // 1067\n    route: function(route, callback) {                                                                            // 1068\n      this.handlers.unshift({route: route, callback: callback});                                                  // 1069\n    },                                                                                                            // 1070\n                                                                                                                  // 1071\n    // Checks the current URL to see if it has changed, and if it has,                                            // 1072\n    // calls `loadUrl`, normalizing across the hidden iframe.                                                     // 1073\n    checkUrl: function(e) {                                                                                       // 1074\n      var current = this.getFragment();                                                                           // 1075\n      if (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));         // 1076\n      if (current == this.fragment) return false;                                                                 // 1077\n      if (this.iframe) this.navigate(current);                                                                    // 1078\n      this.loadUrl() || this.loadUrl(this.getHash());                                                             // 1079\n    },                                                                                                            // 1080\n                                                                                                                  // 1081\n    // Attempt to load the current URL fragment. If a route succeeds with a                                       // 1082\n    // match, returns `true`. If no defined routes matches the fragment,                                          // 1083\n    // returns `false`.                                                                                           // 1084\n    loadUrl: function(fragmentOverride) {                                                                         // 1085\n      var fragment = this.fragment = this.getFragment(fragmentOverride);                                          // 1086\n      var matched = _.any(this.handlers, function(handler) {                                                      // 1087\n        if (handler.route.test(fragment)) {                                                                       // 1088\n          handler.callback(fragment);                                                                             // 1089\n          return true;                                                                                            // 1090\n        }                                                                                                         // 1091\n      });                                                                                                         // 1092\n      return matched;                                                                                             // 1093\n    },                                                                                                            // 1094\n                                                                                                                  // 1095\n    // Save a fragment into the hash history, or replace the URL state if the                                     // 1096\n    // 'replace' option is passed. You are responsible for properly URL-encoding                                  // 1097\n    // the fragment in advance.                                                                                   // 1098\n    //                                                                                                            // 1099\n    // The options object can contain `trigger: true` if you wish to have the                                     // 1100\n    // route callback be fired (not usually desirable), or `replace: true`, if                                    // 1101\n    // you wish to modify the current URL without adding an entry to the history.                                 // 1102\n    navigate: function(fragment, options) {                                                                       // 1103\n      if (!History.started) return false;                                                                         // 1104\n      if (!options || options === true) options = {trigger: options};                                             // 1105\n      var frag = (fragment || '').replace(routeStripper, '');                                                     // 1106\n      if (this.fragment == frag) return;                                                                          // 1107\n                                                                                                                  // 1108\n      // If pushState is available, we use it to set the fragment as a real URL.                                  // 1109\n      if (this._hasPushState) {                                                                                   // 1110\n        if (frag.indexOf(this.options.root) != 0) frag = this.options.root + frag;                                // 1111\n        this.fragment = frag;                                                                                     // 1112\n        window.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, frag);                 // 1113\n                                                                                                                  // 1114\n      // If hash changes haven't been explicitly disabled, update the hash                                        // 1115\n      // fragment to store history.                                                                               // 1116\n      } else if (this._wantsHashChange) {                                                                         // 1117\n        this.fragment = frag;                                                                                     // 1118\n        this._updateHash(window.location, frag, options.replace);                                                 // 1119\n        if (this.iframe && (frag != this.getFragment(this.getHash(this.iframe)))) {                               // 1120\n          // Opening and closing the iframe tricks IE7 and earlier to push a history entry on hash-tag change.    // 1121\n          // When replace is true, we don't want this.                                                            // 1122\n          if(!options.replace) this.iframe.document.open().close();                                               // 1123\n          this._updateHash(this.iframe.location, frag, options.replace);                                          // 1124\n        }                                                                                                         // 1125\n                                                                                                                  // 1126\n      // If you've told us that you explicitly don't want fallback hashchange-                                    // 1127\n      // based history, then `navigate` becomes a page refresh.                                                   // 1128\n      } else {                                                                                                    // 1129\n        window.location.assign(this.options.root + fragment);                                                     // 1130\n      }                                                                                                           // 1131\n      if (options.trigger) this.loadUrl(fragment);                                                                // 1132\n    },                                                                                                            // 1133\n                                                                                                                  // 1134\n    // Update the hash location, either replacing the current entry, or adding                                    // 1135\n    // a new one to the browser history.                                                                          // 1136\n    _updateHash: function(location, fragment, replace) {                                                          // 1137\n      if (replace) {                                                                                              // 1138\n        location.replace(location.toString().replace(/(javascript:|#).*$/, '') + '#' + fragment);                 // 1139\n      } else {                                                                                                    // 1140\n        location.hash = fragment;                                                                                 // 1141\n      }                                                                                                           // 1142\n    }                                                                                                             // 1143\n  });                                                                                                             // 1144\n                                                                                                                  // 1145\n  // Backbone.View                                                                                                // 1146\n  // -------------                                                                                                // 1147\n                                                                                                                  // 1148\n  // Creating a Backbone.View creates its initial element outside of the DOM,                                     // 1149\n  // if an existing element is not provided...                                                                    // 1150\n  var View = Backbone.View = function(options) {                                                                  // 1151\n    this.cid = _.uniqueId('view');                                                                                // 1152\n    this._configure(options || {});                                                                               // 1153\n    this._ensureElement();                                                                                        // 1154\n    this.initialize.apply(this, arguments);                                                                       // 1155\n    this.delegateEvents();                                                                                        // 1156\n  };                                                                                                              // 1157\n                                                                                                                  // 1158\n  // Cached regex to split keys for `delegate`.                                                                   // 1159\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;                                                                   // 1160\n                                                                                                                  // 1161\n  // List of view options to be merged as properties.                                                             // 1162\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName'];                    // 1163\n                                                                                                                  // 1164\n  // Set up all inheritable **Backbone.View** properties and methods.                                             // 1165\n  _.extend(View.prototype, Events, {                                                                              // 1166\n                                                                                                                  // 1167\n    // The default `tagName` of a View's element is `\"div\"`.                                                      // 1168\n    tagName: 'div',                                                                                               // 1169\n                                                                                                                  // 1170\n    // jQuery delegate for element lookup, scoped to DOM elements within the                                      // 1171\n    // current view. This should be prefered to global lookups where possible.                                    // 1172\n    $: function(selector) {                                                                                       // 1173\n      return this.$el.find(selector);                                                                             // 1174\n    },                                                                                                            // 1175\n                                                                                                                  // 1176\n    // Initialize is an empty function by default. Override it with your own                                      // 1177\n    // initialization logic.                                                                                      // 1178\n    initialize: function(){},                                                                                     // 1179\n                                                                                                                  // 1180\n    // **render** is the core function that your view should override, in order                                   // 1181\n    // to populate its element (`this.el`), with the appropriate HTML. The                                        // 1182\n    // convention is for **render** to always return `this`.                                                      // 1183\n    render: function() {                                                                                          // 1184\n      return this;                                                                                                // 1185\n    },                                                                                                            // 1186\n                                                                                                                  // 1187\n    // Remove this view from the DOM. Note that the view isn't present in the                                     // 1188\n    // DOM by default, so calling this method may be a no-op.                                                     // 1189\n    remove: function() {                                                                                          // 1190\n      this.$el.remove();                                                                                          // 1191\n      return this;                                                                                                // 1192\n    },                                                                                                            // 1193\n                                                                                                                  // 1194\n    // For small amounts of DOM Elements, where a full-blown template isn't                                       // 1195\n    // needed, use **make** to manufacture elements, one at a time.                                               // 1196\n    //                                                                                                            // 1197\n    //     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));                                // 1198\n    //                                                                                                            // 1199\n    make: function(tagName, attributes, content) {                                                                // 1200\n      var el = document.createElement(tagName);                                                                   // 1201\n      if (attributes) $(el).attr(attributes);                                                                     // 1202\n      if (content) $(el).html(content);                                                                           // 1203\n      return el;                                                                                                  // 1204\n    },                                                                                                            // 1205\n                                                                                                                  // 1206\n    // Change the view's element (`this.el` property), including event                                            // 1207\n    // re-delegation.                                                                                             // 1208\n    setElement: function(element, delegate) {                                                                     // 1209\n      if (this.$el) this.undelegateEvents();                                                                      // 1210\n      this.$el = (element instanceof $) ? element : $(element);                                                   // 1211\n      this.el = this.$el[0];                                                                                      // 1212\n      if (delegate !== false) this.delegateEvents();                                                              // 1213\n      return this;                                                                                                // 1214\n    },                                                                                                            // 1215\n                                                                                                                  // 1216\n    // Set callbacks, where `this.events` is a hash of                                                            // 1217\n    //                                                                                                            // 1218\n    // *{\"event selector\": \"callback\"}*                                                                           // 1219\n    //                                                                                                            // 1220\n    //     {                                                                                                      // 1221\n    //       'mousedown .title':  'edit',                                                                         // 1222\n    //       'click .button':     'save'                                                                          // 1223\n    //       'click .open':       function(e) { ... }                                                             // 1224\n    //     }                                                                                                      // 1225\n    //                                                                                                            // 1226\n    // pairs. Callbacks will be bound to the view, with `this` set properly.                                      // 1227\n    // Uses event delegation for efficiency.                                                                      // 1228\n    // Omitting the selector binds the event to `this.el`.                                                        // 1229\n    // This only works for delegate-able events: not `focus`, `blur`, and                                         // 1230\n    // not `change`, `submit`, and `reset` in Internet Explorer.                                                  // 1231\n    delegateEvents: function(events) {                                                                            // 1232\n      if (!(events || (events = getValue(this, 'events')))) return;                                               // 1233\n      this.undelegateEvents();                                                                                    // 1234\n      for (var key in events) {                                                                                   // 1235\n        var method = events[key];                                                                                 // 1236\n        if (!_.isFunction(method)) method = this[events[key]];                                                    // 1237\n        if (!method) throw new Error('Method \"' + events[key] + '\" does not exist');                              // 1238\n        var match = key.match(delegateEventSplitter);                                                             // 1239\n        var eventName = match[1], selector = match[2];                                                            // 1240\n        method = _.bind(method, this);                                                                            // 1241\n        eventName += '.delegateEvents' + this.cid;                                                                // 1242\n        if (selector === '') {                                                                                    // 1243\n          this.$el.bind(eventName, method);                                                                       // 1244\n        } else {                                                                                                  // 1245\n          this.$el.delegate(selector, eventName, method);                                                         // 1246\n        }                                                                                                         // 1247\n      }                                                                                                           // 1248\n    },                                                                                                            // 1249\n                                                                                                                  // 1250\n    // Clears all callbacks previously bound to the view with `delegateEvents`.                                   // 1251\n    // You usually don't need to use this, but may wish to if you have multiple                                   // 1252\n    // Backbone views attached to the same DOM element.                                                           // 1253\n    undelegateEvents: function() {                                                                                // 1254\n      this.$el.unbind('.delegateEvents' + this.cid);                                                              // 1255\n    },                                                                                                            // 1256\n                                                                                                                  // 1257\n    // Performs the initial configuration of a View with a set of options.                                        // 1258\n    // Keys with special meaning *(model, collection, id, className)*, are                                        // 1259\n    // attached directly to the view.                                                                             // 1260\n    _configure: function(options) {                                                                               // 1261\n      if (this.options) options = _.extend({}, this.options, options);                                            // 1262\n      for (var i = 0, l = viewOptions.length; i < l; i++) {                                                       // 1263\n        var attr = viewOptions[i];                                                                                // 1264\n        if (options[attr]) this[attr] = options[attr];                                                            // 1265\n      }                                                                                                           // 1266\n      this.options = options;                                                                                     // 1267\n    },                                                                                                            // 1268\n                                                                                                                  // 1269\n    // Ensure that the View has a DOM element to render into.                                                     // 1270\n    // If `this.el` is a string, pass it through `$()`, take the first                                            // 1271\n    // matching element, and re-assign it to `el`. Otherwise, create                                              // 1272\n    // an element from the `id`, `className` and `tagName` properties.                                            // 1273\n    _ensureElement: function() {                                                                                  // 1274\n      if (!this.el) {                                                                                             // 1275\n        var attrs = getValue(this, 'attributes') || {};                                                           // 1276\n        if (this.id) attrs.id = this.id;                                                                          // 1277\n        if (this.className) attrs['class'] = this.className;                                                      // 1278\n        this.setElement(this.make(this.tagName, attrs), false);                                                   // 1279\n      } else {                                                                                                    // 1280\n        this.setElement(this.el, false);                                                                          // 1281\n      }                                                                                                           // 1282\n    }                                                                                                             // 1283\n                                                                                                                  // 1284\n  });                                                                                                             // 1285\n                                                                                                                  // 1286\n  // The self-propagating extend function that Backbone classes use.                                              // 1287\n  var extend = function (protoProps, classProps) {                                                                // 1288\n    var child = inherits(this, protoProps, classProps);                                                           // 1289\n    child.extend = this.extend;                                                                                   // 1290\n    return child;                                                                                                 // 1291\n  };                                                                                                              // 1292\n                                                                                                                  // 1293\n  // Set up inheritance for the model, collection, and view.                                                      // 1294\n  Model.extend = Collection.extend = Router.extend = View.extend = extend;                                        // 1295\n                                                                                                                  // 1296\n  // Backbone.sync                                                                                                // 1297\n  // -------------                                                                                                // 1298\n                                                                                                                  // 1299\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.                                        // 1300\n  var methodMap = {                                                                                               // 1301\n    'create': 'POST',                                                                                             // 1302\n    'update': 'PUT',                                                                                              // 1303\n    'delete': 'DELETE',                                                                                           // 1304\n    'read':   'GET'                                                                                               // 1305\n  };                                                                                                              // 1306\n                                                                                                                  // 1307\n  // Override this function to change the manner in which Backbone persists                                       // 1308\n  // models to the server. You will be passed the type of request, and the                                        // 1309\n  // model in question. By default, makes a RESTful Ajax request                                                  // 1310\n  // to the model's `url()`. Some possible customizations could be:                                               // 1311\n  //                                                                                                              // 1312\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.                                        // 1313\n  // * Send up the models as XML instead of JSON.                                                                 // 1314\n  // * Persist models via WebSockets instead of Ajax.                                                             // 1315\n  //                                                                                                              // 1316\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests                                  // 1317\n  // as `POST`, with a `_method` parameter containing the true HTTP method,                                       // 1318\n  // as well as all requests with the body as `application/x-www-form-urlencoded`                                 // 1319\n  // instead of `application/json` with the model in a param named `model`.                                       // 1320\n  // Useful when interfacing with server-side languages like **PHP** that make                                    // 1321\n  // it difficult to read the body of `PUT` requests.                                                             // 1322\n  Backbone.sync = function(method, model, options) {                                                              // 1323\n    var type = methodMap[method];                                                                                 // 1324\n                                                                                                                  // 1325\n    // Default options, unless specified.                                                                         // 1326\n    options || (options = {});                                                                                    // 1327\n                                                                                                                  // 1328\n    // Default JSON-request options.                                                                              // 1329\n    var params = {type: type, dataType: 'json'};                                                                  // 1330\n                                                                                                                  // 1331\n    // Ensure that we have a URL.                                                                                 // 1332\n    if (!options.url) {                                                                                           // 1333\n      params.url = getValue(model, 'url') || urlError();                                                          // 1334\n    }                                                                                                             // 1335\n                                                                                                                  // 1336\n    // Ensure that we have the appropriate request data.                                                          // 1337\n    if (!options.data && model && (method == 'create' || method == 'update')) {                                   // 1338\n      params.contentType = 'application/json';                                                                    // 1339\n      params.data = JSON.stringify(model.toJSON());                                                               // 1340\n    }                                                                                                             // 1341\n                                                                                                                  // 1342\n    // For older servers, emulate JSON by encoding the request into an HTML-form.                                 // 1343\n    if (Backbone.emulateJSON) {                                                                                   // 1344\n      params.contentType = 'application/x-www-form-urlencoded';                                                   // 1345\n      params.data = params.data ? {model: params.data} : {};                                                      // 1346\n    }                                                                                                             // 1347\n                                                                                                                  // 1348\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`                                // 1349\n    // And an `X-HTTP-Method-Override` header.                                                                    // 1350\n    if (Backbone.emulateHTTP) {                                                                                   // 1351\n      if (type === 'PUT' || type === 'DELETE') {                                                                  // 1352\n        if (Backbone.emulateJSON) params.data._method = type;                                                     // 1353\n        params.type = 'POST';                                                                                     // 1354\n        params.beforeSend = function(xhr) {                                                                       // 1355\n          xhr.setRequestHeader('X-HTTP-Method-Override', type);                                                   // 1356\n        };                                                                                                        // 1357\n      }                                                                                                           // 1358\n    }                                                                                                             // 1359\n                                                                                                                  // 1360\n    // Don't process data on a non-GET request.                                                                   // 1361\n    if (params.type !== 'GET' && !Backbone.emulateJSON) {                                                         // 1362\n      params.processData = false;                                                                                 // 1363\n    }                                                                                                             // 1364\n                                                                                                                  // 1365\n    // Make the request, allowing the user to override any Ajax options.                                          // 1366\n    return $.ajax(_.extend(params, options));                                                                     // 1367\n  };                                                                                                              // 1368\n                                                                                                                  // 1369\n  // Wrap an optional error callback with a fallback error event.                                                 // 1370\n  Backbone.wrapError = function(onError, originalModel, options) {                                                // 1371\n    return function(model, resp) {                                                                                // 1372\n      resp = model === originalModel ? resp : model;                                                              // 1373\n      if (onError) {                                                                                              // 1374\n        onError(originalModel, resp, options);                                                                    // 1375\n      } else {                                                                                                    // 1376\n        originalModel.trigger('error', originalModel, resp, options);                                             // 1377\n      }                                                                                                           // 1378\n    };                                                                                                            // 1379\n  };                                                                                                              // 1380\n                                                                                                                  // 1381\n  // Helpers                                                                                                      // 1382\n  // -------                                                                                                      // 1383\n                                                                                                                  // 1384\n  // Shared empty constructor function to aid in prototype-chain creation.                                        // 1385\n  var ctor = function(){};                                                                                        // 1386\n                                                                                                                  // 1387\n  // Helper function to correctly set up the prototype chain, for subclasses.                                     // 1388\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and                                      // 1389\n  // class properties to be extended.                                                                             // 1390\n  var inherits = function(parent, protoProps, staticProps) {                                                      // 1391\n    var child;                                                                                                    // 1392\n                                                                                                                  // 1393\n    // The constructor function for the new subclass is either defined by you                                     // 1394\n    // (the \"constructor\" property in your `extend` definition), or defaulted                                     // 1395\n    // by us to simply call the parent's constructor.                                                             // 1396\n    if (protoProps && protoProps.hasOwnProperty('constructor')) {                                                 // 1397\n      child = protoProps.constructor;                                                                             // 1398\n    } else {                                                                                                      // 1399\n      child = function(){ parent.apply(this, arguments); };                                                       // 1400\n    }                                                                                                             // 1401\n                                                                                                                  // 1402\n    // Inherit class (static) properties from parent.                                                             // 1403\n    _.extend(child, parent);                                                                                      // 1404\n                                                                                                                  // 1405\n    // Set the prototype chain to inherit from `parent`, without calling                                          // 1406\n    // `parent`'s constructor function.                                                                           // 1407\n    ctor.prototype = parent.prototype;                                                                            // 1408\n    child.prototype = new ctor();                                                                                 // 1409\n                                                                                                                  // 1410\n    // Add prototype properties (instance properties) to the subclass,                                            // 1411\n    // if supplied.                                                                                               // 1412\n    if (protoProps) _.extend(child.prototype, protoProps);                                                        // 1413\n                                                                                                                  // 1414\n    // Add static properties to the constructor function, if supplied.                                            // 1415\n    if (staticProps) _.extend(child, staticProps);                                                                // 1416\n                                                                                                                  // 1417\n    // Correctly set child's `prototype.constructor`.                                                             // 1418\n    child.prototype.constructor = child;                                                                          // 1419\n                                                                                                                  // 1420\n    // Set a convenience property in case the parent's prototype is needed later.                                 // 1421\n    child.__super__ = parent.prototype;                                                                           // 1422\n                                                                                                                  // 1423\n    return child;                                                                                                 // 1424\n  };                                                                                                              // 1425\n                                                                                                                  // 1426\n  // Helper function to get a value from a Backbone object as a property                                          // 1427\n  // or as a function.                                                                                            // 1428\n  var getValue = function(object, prop) {                                                                         // 1429\n    if (!(object && object[prop])) return null;                                                                   // 1430\n    return _.isFunction(object[prop]) ? object[prop]() : object[prop];                                            // 1431\n  };                                                                                                              // 1432\n                                                                                                                  // 1433\n  // Throw an error when a URL is needed, and none is supplied.                                                   // 1434\n  var urlError = function() {                                                                                     // 1435\n    throw new Error('A \"url\" property or function must be specified');                                            // 1436\n  };                                                                                                              // 1437\n                                                                                                                  // 1438\n}).call(this);                                                                                                    // 1439\n                                                                                                                  // 1440\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}